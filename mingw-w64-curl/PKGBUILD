# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=curl
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-gnutls"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-winssl")
pkgver=8.16.0
pkgrel=2
pkgdesc="Command line tool and library for transferring data with URLs (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
url="https://curl.se/"
license=("spdx:MIT")
_cert_depends=("${MINGW_PACKAGE_PREFIX}-ca-certificates"
               "${MINGW_PACKAGE_PREFIX}-libssh2")
_openssl_depends=("${MINGW_PACKAGE_PREFIX}-openssl"
                  "${MINGW_PACKAGE_PREFIX}-nghttp2")
_gnutls_depends=("${MINGW_PACKAGE_PREFIX}-rtmpdump"
                 "${MINGW_PACKAGE_PREFIX}-gnutls")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-autotools"
             "${_cert_depends[@]}"
             "${_openssl_depends[@]}"
             "${_gnutls_depends[@]}")
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-c-ares"
         "${MINGW_PACKAGE_PREFIX}-brotli"
         "${MINGW_PACKAGE_PREFIX}-libidn2"
         "${MINGW_PACKAGE_PREFIX}-libpsl"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-zstd")
options=('staticlibs')
source=("https://github.com/curl/curl/releases/download/${_realname}-${pkgver//./_}/${_realname}-${pkgver}.tar.bz2"{,.asc}
        "pathtools.c"
        "pathtools.h"
        "0001-Make-cURL-relocatable.patch"
        "0002-Hack-make-relocation-work-inside-libexec-git-core-an.patch"
        "0003-ip-happy-do-not-set-unnecessary-timeout.patch")
sha256sums=('9459180ab4933b30d0778ddd71c91fe2911fab731c46e59b3f4c8385b1596c91'
            'SKIP'
            '08209cbf1633fa92eae7e5d28f95f8df9d6184cc20fa878c99aec4709bb257fd'
            '965d3921ec4fdeec94a2718bc2c85ce5e1a00ea0e499330a554074a7ae15dfc6'
            '8aa4eab2f2c38afb0ae7825be5be032194574f08cedd37b57b9ea5a19eb25ad4'
            'c43eb97757f71a5f2368fa1b132d286e8ceb91060742e643d4dbc06712a57e94'
            '90de3265dc33894fe53fb2b0c0ffd25e1fae0330d2a5e00ebafb3cb34c2e7591')
validpgpkeys=('27EDEAF22F3ABCEB50DB9A125CC908FDB71E12C2')  # Daniel Stenberg

if test -z "$WITHOUT_ALTERNATES"
then
	pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-openssl-alternate")
        pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-gnutls-alternate")
        pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-winssl-alternate")
fi

case "$WITHOUT_PDBS,$MSYSTEM" in
,CLANG*)
	pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-pdb")
        pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-gnutls-pdb")
        pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-winssl-pdb")
	options+=('!strip')
	STRIP=llvm-strip
	STRIP_OPTS=--strip-debug
	;;
,*)
	pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-pdb")
        pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-gnutls-pdb")
        pkgname+=("${MINGW_PACKAGE_PREFIX}-${_realname}-winssl-pdb")
	makedepends+=("${MINGW_PACKAGE_PREFIX}-cv2pdb")
	options+=('!strip')
	STRIP=cv2pdb
	;;
*)
	options+=('strip')
esac

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  test ! -d "${startdir}/../mingw-w64-pathtools" || {
    cmp "${startdir}/../mingw-w64-pathtools/pathtools.c" "${srcdir}/pathtools.c" &&
    cmp "${startdir}/../mingw-w64-pathtools/pathtools.h" "${srcdir}/pathtools.h"
  } || exit 1

  cd "${srcdir}/${_realname}-${pkgver}"
  cp -fHv "${srcdir}"/pathtools.[ch] lib/

  apply_patch_with_msg \
    0001-Make-cURL-relocatable.patch \
    0002-Hack-make-relocation-work-inside-libexec-git-core-an.patch \
    0003-ip-happy-do-not-set-unnecessary-timeout.patch

  autoreconf -vfi
}

do_build() {
  _variant=$1
  _destdir="${srcdir}/build-${MSYSTEM}"
  if [ "${_variant}" != "-openssl" ]; then
    _destdir="${_destdir}${_variant}"
  fi
  local -a extra_config
  if check_option "debug" "y"; then
    extra_config+=( --enable-debug )
  else
    extra_config+=( --disable-debug )
  fi

  local -a _variant_config
  if [ "${_variant}" = "-winssl" ]; then
    _variant_config+=("--with-schannel")
    _variant_config+=('--without-nghttp2')
    _variant_config+=("--without-ca-bundle")
    _variant_config+=("--without-ca-path")
    _variant_config+=("--without-librtmp")
  elif [ "${_variant}" = "-gnutls" ]; then
    _variant_config+=("--with-default-ssl-backend=gnutls")
    _variant_config+=("--with-gnutls")
    _variant_config+=("--with-schannel")
    _variant_config+=('--without-nghttp2')
    _variant_config+=("--with-ca-bundle=${MINGW_PREFIX}/etc/ssl/certs/ca-bundle.crt")
    _variant_config+=("--with-librtmp")
  elif [ "${_variant}" = "-openssl" ]; then
    _variant_config+=("--with-default-ssl-backend=openssl")
    _variant_config+=("--with-openssl")
    _variant_config+=("--with-schannel")
    _variant_config+=("--with-ca-bundle=${MINGW_PREFIX}/etc/ssl/certs/ca-bundle.crt")
    _variant_config+=("--with-nghttp2=${MINGW_PREFIX}")
    _variant_config+=("--without-librtmp")
  fi

  case "$MSYSTEM" in CLANG*) export LDFLAGS="-Wl,-pdb=";; esac # Ensures that Clang generates PDB files

  msg2 "Building shared library"
  mkdir -p "${_destdir}-shared" && cd "${_destdir}-shared"
  ../${_realname}-${pkgver}/configure \
    --prefix=${MINGW_PREFIX} \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --disable-pthreads \
    --without-random \
    --disable-static \
    --enable-shared \
    --enable-sspi \
    --enable-ldap \
    --enable-ldaps \
    --with-brotli \
    --with-ldap-lib=wldap32 \
    --with-libssh2 \
    --with-zstd \
    "${_variant_config[@]}" \
    "${extra_config[@]}"
# there's a bug with zsh completion generation script and Windows.
# curl has to be specified with the file extension.
  sed -i "s|\/curl > \$\@|\/curl\$\{EXEEXT\} > \$\@|" scripts/Makefile
  make
  case "${pkgname[@]}"
  in *pdb*)
    $STRIP $STRIP_OPTS lib/.libs/libcurl-4.dll
    $STRIP $STRIP_OPTS src/.libs/curl.exe
  esac
}

build() {
  do_build -openssl
  do_build -winssl
  do_build -gnutls
}

do_package() {
  cd "${srcdir}/build-${MSYSTEM}$1-shared"

  test pdb != "$2" || {
    install -d -m 755 "${pkgdir}${MINGW_PREFIX}/bin"
    install -m 755 lib/.libs/libcurl-4.pdb "${pkgdir}${MINGW_PREFIX}/bin"
    install -m 755 src/.libs/curl.pdb "${pkgdir}${MINGW_PREFIX}/bin"
    return
  }

  test alternate != "$2" || {
    install -d -m 755 "${pkgdir}${MINGW_PREFIX}/bin"
    infix=${1:--openssl}
    test -winssl != $infix || infix=-schannel # the name "winssl" was ill-considered ;-)
    install -m 755 lib/.libs/libcurl-4.dll "${pkgdir}${MINGW_PREFIX}/bin/libcurl$infix-4.dll"
    return
  }

  make DESTDIR="${pkgdir}" install

  local PREFIX_DEPS=$(cygpath -am ${MINGW_PREFIX})
  sed -s "s|${PREFIX_DEPS}|${MINGW_PREFIX}|g" -i ${pkgdir}${MINGW_PREFIX}/bin/curl-config
  sed -s "s|${PREFIX_DEPS}|${MINGW_PREFIX}|g" -i ${pkgdir}${MINGW_PREFIX}/lib/pkgconfig/libcurl.pc

  install -Dm644 "${srcdir}/${_realname}-${pkgver}/COPYING" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE"
}

package_curl() {
  depends=("${depends[@]}"
           "${_cert_depends[@]}"
           "${_openssl_depends[@]}")
  test alternate = "$1" ||
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-winssl"
             "${MINGW_PACKAGE_PREFIX}-${_realname}-gnutls")

  # (Temporarily) force git-sdk-* to switch to the mingw-w64-curl-winssl
  # package because that package does not depend on OpenSSL, allowing Git for
  # Windows to upgrade to OpenSSL v3.* (which would otherwise break libcurl,
  # and therefore `git clone`, and therefore Git for Windows' SDK
  # synchronization, because that upgrade changes the OpenSSL DLL's file name).
  #
  # To allow Git's `http.sslBackend=openssl` to work, still, this code block
  # _actually_ overrides the `mingw-w64-curl` package with the
  # `-openssl-alternate` variant, and letting that variant depend on the
  # `-winssl` one. This effectively "force-upgrades" mingw-w64-curl with
  # mingw-w64-curl-winssl and mingw-w64-curl-openssl-alternate.
  #
  # The plan is to remove this override after Git for Windows' SDK has upgraded
  # to OpenSSL v3.* (the current idea being to do that about a week after Git
  # for Windows v2.41.0 has been released, i.e. to wait for a sort-of-idle
  # time).
  test alternate != "$*" || {
    depends+=("${MINGW_PACKAGE_PREFIX}-${_realname}-winssl")
    replaces=("${MINGW_PACKAGE_PREFIX}-${_realname}")
  }

  do_package "" "$@"
}

package_curl-winssl() {
  depends=("${depends[@]}"
           "${MINGW_PACKAGE_PREFIX}-libssh2-wincng")
  test alternate = "$1" ||
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}")
  test alternate = "$1" ||
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}"
             "${MINGW_PACKAGE_PREFIX}-${_realname}-gnutls")
  do_package -winssl "$@"
}

package_curl-gnutls() {
  test alternate = "$1" ||
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}")
  depends=("${depends[@]}"
           "${_cert_depends[@]}"
           "${_gnutls_depends[@]}")
  test alternate = "$1" ||
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}"
             "${MINGW_PACKAGE_PREFIX}-${_realname}-winssl")
  do_package -gnutls "$@"
}

package_curl-pdb() {
  package_curl pdb
}

package_curl-winssl-pdb() {
  package_curl-winssl pdb
}

package_curl-gnutls-pdb() {
  package_curl-gnutls pdb
}

package_curl-openssl-alternate() {
  package_curl alternate
}

package_curl-winssl-alternate() {
  package_curl-winssl alternate
}

package_curl-gnutls-alternate() {
  package_curl-gnutls alternate
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
